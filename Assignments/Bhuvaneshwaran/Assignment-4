
{
 "cells": [
  {
   "cell_type": "markdown",
   "id": "fd7c7a1b",
   "metadata": {},
   "source": [
    "# Customer Segmentation Analysis"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "813a10ec",
   "metadata": {},
   "source": [
    "### Importing the required libraries"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 42,
   "id": "c149580d",
   "metadata": {},
   "outputs": [],
   "source": [
    "import pandas as pd\n",
    "import seaborn as sns\n",
    "import matplotlib.pyplot as plt\n",
    "import numpy as np\n",
    "sns.set_style('darkgrid')\n",
    "sns.set(font_scale=1.3)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 2,
   "id": "99709e92",
   "metadata": {},
   "outputs": [],
   "source": [
    "import warnings\n",
    "warnings.filterwarnings(\"ignore\")"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "bded78ec",
   "metadata": {},
   "source": [
    "### Loading the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 3,
   "id": "ba7e1143",
   "metadata": {},
   "outputs": [],
   "source": [
    "data=pd.read_csv(\"Mall_Customers.csv\")"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 4,
   "id": "ec40d560",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "      <th>Spending Score (1-100)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>15</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>15</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>20</td>\n",
       "      <td>16</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Female</td>\n",
       "      <td>31</td>\n",
       "      <td>17</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
       "0           1    Male   19                  15                      39\n",
       "1           2    Male   21                  15                      81\n",
       "2           3  Female   20                  16                       6\n",
       "3           4  Female   23                  16                      77\n",
       "4           5  Female   31                  17                      40"
      ]
     },
     "execution_count": 4,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.head()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 5,
   "id": "f5dd1023",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "<class 'pandas.core.frame.DataFrame'>\n",
      "RangeIndex: 200 entries, 0 to 199\n",
      "Data columns (total 5 columns):\n",
      " #   Column                  Non-Null Count  Dtype \n",
      "---  ------                  --------------  ----- \n",
      " 0   CustomerID              200 non-null    int64 \n",
      " 1   Gender                  200 non-null    object\n",
      " 2   Age                     200 non-null    int64 \n",
      " 3   Annual Income (k$)      200 non-null    int64 \n",
      " 4   Spending Score (1-100)  200 non-null    int64 \n",
      "dtypes: int64(4), object(1)\n",
      "memory usage: 7.9+ KB\n"
     ]
    }
   ],
   "source": [
    "data.info()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 6,
   "id": "bf969e7c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "      <th>Spending Score (1-100)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>100.500000</td>\n",
       "      <td>38.850000</td>\n",
       "      <td>60.560000</td>\n",
       "      <td>50.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>57.879185</td>\n",
       "      <td>13.969007</td>\n",
       "      <td>26.264721</td>\n",
       "      <td>25.823522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>50.750000</td>\n",
       "      <td>28.750000</td>\n",
       "      <td>41.500000</td>\n",
       "      <td>34.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>100.500000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>61.500000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>150.250000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>73.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>200.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>137.000000</td>\n",
       "      <td>99.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       CustomerID         Age  Annual Income (k$)  Spending Score (1-100)\n",
       "count  200.000000  200.000000          200.000000              200.000000\n",
       "mean   100.500000   38.850000           60.560000               50.200000\n",
       "std     57.879185   13.969007           26.264721               25.823522\n",
       "min      1.000000   18.000000           15.000000                1.000000\n",
       "25%     50.750000   28.750000           41.500000               34.750000\n",
       "50%    100.500000   36.000000           61.500000               50.000000\n",
       "75%    150.250000   49.000000           78.000000               73.000000\n",
       "max    200.000000   70.000000          137.000000               99.000000"
      ]
     },
     "execution_count": 6,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "73c26c5b",
   "metadata": {},
   "source": [
    "### Performing the Visualizations"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 7,
   "id": "2179f011",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1500x1500 with 4 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#univariate analysis\n",
    "cols = 3\n",
    "rows = 3\n",
    "num_cols = data.select_dtypes(exclude='object').columns\n",
    "fig = plt.figure( figsize=(cols*5, rows*5))\n",
    "for i, col in enumerate(num_cols):\n",
    "    \n",
    "    ax=fig.add_subplot(rows,cols,i+1)\n",
    "    \n",
    "    sns.histplot(x = data[col], ax = ax)\n",
    "    \n",
    "fig.tight_layout()  \n",
    "plt.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 8,
   "id": "64e8257b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "<AxesSubplot:xlabel='Age'>"
      ]
     },
     "execution_count": 8,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "sns.violinplot(x=data[\"Age\"])"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 9,
   "id": "573a2f7a",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "Text(0, 0.5, 'CustomerID')"
      ]
     },
     "execution_count": 9,
     "metadata": {},
     "output_type": "execute_result"
    },
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#Bivariate analysis\n",
    "import matplotlib.pyplot as plt\n",
    "\n",
    "#create scatterplot of hours vs. score\n",
    "plt.scatter(data.Age, data.CustomerID)\n",
    "plt.title('Age vs CustomerID')\n",
    "plt.xlabel('Age')\n",
    "plt.ylabel('CustomerID')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 10,
   "id": "3300399f",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x1000 with 20 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "#multivariate analysis\n",
    "sns.pairplot(data);"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "ad49262d",
   "metadata": {},
   "source": [
    "### Performing descriptive statistics on the dataset"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 11,
   "id": "a90e165d",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CustomerID                100.50\n",
       "Age                        38.85\n",
       "Annual Income (k$)         60.56\n",
       "Spending Score (1-100)     50.20\n",
       "dtype: float64"
      ]
     },
     "execution_count": 11,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.mean() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 12,
   "id": "97921b61",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "CustomerID                100.5\n",
       "Age                        36.0\n",
       "Annual Income (k$)         61.5\n",
       "Spending Score (1-100)     50.0\n",
       "dtype: float64"
      ]
     },
     "execution_count": 12,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data.median() "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 13,
   "id": "11622117",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "image/png": "\n",
      "text/plain": [
       "<Figure size 1000x1000 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "norm_data = pd.DataFrame(np.random.normal(size=100000))\n",
    "\n",
    "norm_data.plot(kind=\"density\",\n",
    "              figsize=(10,10));\n",
    "\n",
    "\n",
    "plt.vlines(norm_data.mean(),     # Plot black line at mean\n",
    "           ymin=0, \n",
    "           ymax=0.4,\n",
    "           linewidth=5.0);\n",
    "\n",
    "plt.vlines(norm_data.median(),   # Plot red line at median\n",
    "           ymin=0, \n",
    "           ymax=0.4, \n",
    "           linewidth=2.0,\n",
    "           color=\"red\");"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "c6cf886b",
   "metadata": {},
   "source": [
    "### Checking for Missing values and dealing with them"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 14,
   "id": "21e0f063",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "      <th>Spending Score (1-100)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "      <td>False</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CustomerID  Gender    Age  Annual Income (k$)  Spending Score (1-100)\n",
       "0         False   False  False               False                   False\n",
       "1         False   False  False               False                   False\n",
       "2         False   False  False               False                   False\n",
       "3         False   False  False               False                   False\n",
       "4         False   False  False               False                   False\n",
       "..          ...     ...    ...                 ...                     ...\n",
       "195       False   False  False               False                   False\n",
       "196       False   False  False               False                   False\n",
       "197       False   False  False               False                   False\n",
       "198       False   False  False               False                   False\n",
       "199       False   False  False               False                   False\n",
       "\n",
       "[200 rows x 5 columns]"
      ]
     },
     "execution_count": 14,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = pd.DataFrame(data)\n",
    "df.isnull()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 15,
   "id": "3a5ce82c",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "      <th>Spending Score (1-100)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>15</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>15</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>20</td>\n",
       "      <td>16</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Female</td>\n",
       "      <td>31</td>\n",
       "      <td>17</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>196</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>120</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>197</td>\n",
       "      <td>Female</td>\n",
       "      <td>45</td>\n",
       "      <td>126</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>198</td>\n",
       "      <td>Male</td>\n",
       "      <td>32</td>\n",
       "      <td>126</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>199</td>\n",
       "      <td>Male</td>\n",
       "      <td>32</td>\n",
       "      <td>137</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>200</td>\n",
       "      <td>Male</td>\n",
       "      <td>30</td>\n",
       "      <td>137</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
       "0             1    Male   19                  15                      39\n",
       "1             2    Male   21                  15                      81\n",
       "2             3  Female   20                  16                       6\n",
       "3             4  Female   23                  16                      77\n",
       "4             5  Female   31                  17                      40\n",
       "..          ...     ...  ...                 ...                     ...\n",
       "195         196  Female   35                 120                      79\n",
       "196         197  Female   45                 126                      28\n",
       "197         198    Male   32                 126                      74\n",
       "198         199    Male   32                 137                      18\n",
       "199         200    Male   30                 137                      83\n",
       "\n",
       "[200 rows x 5 columns]"
      ]
     },
     "execution_count": 15,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#fill the missing value with previous value\n",
    "df.fillna(method ='pad')"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 16,
   "id": "d2f73246",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "      <th>Spending Score (1-100)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>Male</td>\n",
       "      <td>19</td>\n",
       "      <td>15</td>\n",
       "      <td>39</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>Male</td>\n",
       "      <td>21</td>\n",
       "      <td>15</td>\n",
       "      <td>81</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>Female</td>\n",
       "      <td>20</td>\n",
       "      <td>16</td>\n",
       "      <td>6</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>Female</td>\n",
       "      <td>23</td>\n",
       "      <td>16</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>Female</td>\n",
       "      <td>31</td>\n",
       "      <td>17</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>196</td>\n",
       "      <td>Female</td>\n",
       "      <td>35</td>\n",
       "      <td>120</td>\n",
       "      <td>79</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>197</td>\n",
       "      <td>Female</td>\n",
       "      <td>45</td>\n",
       "      <td>126</td>\n",
       "      <td>28</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>198</td>\n",
       "      <td>Male</td>\n",
       "      <td>32</td>\n",
       "      <td>126</td>\n",
       "      <td>74</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>199</td>\n",
       "      <td>Male</td>\n",
       "      <td>32</td>\n",
       "      <td>137</td>\n",
       "      <td>18</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>200</td>\n",
       "      <td>Male</td>\n",
       "      <td>30</td>\n",
       "      <td>137</td>\n",
       "      <td>83</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
       "0             1    Male   19                  15                      39\n",
       "1             2    Male   21                  15                      81\n",
       "2             3  Female   20                  16                       6\n",
       "3             4  Female   23                  16                      77\n",
       "4             5  Female   31                  17                      40\n",
       "..          ...     ...  ...                 ...                     ...\n",
       "195         196  Female   35                 120                      79\n",
       "196         197  Female   45                 126                      28\n",
       "197         198    Male   32                 126                      74\n",
       "198         199    Male   32                 137                      18\n",
       "199         200    Male   30                 137                      83\n",
       "\n",
       "[200 rows x 5 columns]"
      ]
     },
     "execution_count": 16,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#filling null values in missing values\n",
    "data[0:]"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "866112e8",
   "metadata": {},
   "source": [
    "### Finding the outliers and replacing them outliers "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 17,
   "id": "1b7a211c",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.3218425498619055\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "count    200.000000\n",
       "mean      60.560000\n",
       "std       26.264721\n",
       "min       15.000000\n",
       "25%       41.500000\n",
       "50%       61.500000\n",
       "75%       78.000000\n",
       "max      137.000000\n",
       "Name: Annual Income (k$), dtype: float64"
      ]
     },
     "execution_count": 17,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "print(df['Annual Income (k$)'].skew())\n",
    "df['Annual Income (k$)'].describe()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 18,
   "id": "26905bf8",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "61.5\n",
      "103.0\n"
     ]
    },
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "      <th>Spending Score (1-100)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>count</th>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "      <td>200.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>mean</th>\n",
       "      <td>100.500000</td>\n",
       "      <td>38.850000</td>\n",
       "      <td>60.560000</td>\n",
       "      <td>50.200000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>std</th>\n",
       "      <td>57.879185</td>\n",
       "      <td>13.969007</td>\n",
       "      <td>26.264721</td>\n",
       "      <td>25.823522</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>min</th>\n",
       "      <td>1.000000</td>\n",
       "      <td>18.000000</td>\n",
       "      <td>15.000000</td>\n",
       "      <td>1.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>25%</th>\n",
       "      <td>50.750000</td>\n",
       "      <td>28.750000</td>\n",
       "      <td>41.500000</td>\n",
       "      <td>34.750000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>50%</th>\n",
       "      <td>100.500000</td>\n",
       "      <td>36.000000</td>\n",
       "      <td>61.500000</td>\n",
       "      <td>50.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>75%</th>\n",
       "      <td>150.250000</td>\n",
       "      <td>49.000000</td>\n",
       "      <td>78.000000</td>\n",
       "      <td>73.000000</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>max</th>\n",
       "      <td>200.000000</td>\n",
       "      <td>70.000000</td>\n",
       "      <td>137.000000</td>\n",
       "      <td>99.000000</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "       CustomerID         Age  Annual Income (k$)  Spending Score (1-100)\n",
       "count  200.000000  200.000000          200.000000              200.000000\n",
       "mean   100.500000   38.850000           60.560000               50.200000\n",
       "std     57.879185   13.969007           26.264721               25.823522\n",
       "min      1.000000   18.000000           15.000000                1.000000\n",
       "25%     50.750000   28.750000           41.500000               34.750000\n",
       "50%    100.500000   36.000000           61.500000               50.000000\n",
       "75%    150.250000   49.000000           78.000000               73.000000\n",
       "max    200.000000   70.000000          137.000000               99.000000"
      ]
     },
     "execution_count": 18,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#replacing the outliers\n",
    "print(df['Annual Income (k$)'].quantile(0.50)) \n",
    "print(df['Annual Income (k$)'].quantile(0.95)) \n",
    "df['Annual Income (k$)'] = np.where(df['Annual Income (k$)'] > 325, 140, df['Annual Income (k$)'])\n",
    "df.describe()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "1ed44aae",
   "metadata": {},
   "source": [
    "### Checking for Categorical columns and performing Encoding "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 19,
   "id": "577457fe",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "0      Male\n",
       "1      Male\n",
       "2    Female\n",
       "3    Female\n",
       "4    Female\n",
       "Name: Gender, dtype: object"
      ]
     },
     "execution_count": 19,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "data_categorical = data['Gender']\n",
    "data_categorical.head()"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "25d1f1a2",
   "metadata": {},
   "source": [
    "### Data preprocessing "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 20,
   "id": "17011fad",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([1, 0])"
      ]
     },
     "execution_count": 20,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "from sklearn import preprocessing\n",
    "  \n",
    "# label_encoder object knows how to understand word labels.\n",
    "label_encoder = preprocessing.LabelEncoder()\n",
    "  \n",
    "# Encode labels in column 'species'.\n",
    "df['Gender']= label_encoder.fit_transform(df['Gender'])\n",
    "df['Gender'].unique()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 21,
   "id": "4554912e",
   "metadata": {},
   "outputs": [],
   "source": [
    "# import packages\n",
    "import numpy as np\n",
    "import pandas as pd\n",
    "from sklearn.model_selection import train_test_split"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 22,
   "id": "3af212f2",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "(200, 5)\n",
      "Head of the dataframe : \n",
      "   CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
      "0           1       1   19                  15                      39\n",
      "1           2       1   21                  15                      81\n",
      "2           3       0   20                  16                       6\n",
      "3           4       0   23                  16                      77\n",
      "4           5       0   31                  17                      40\n",
      "Index(['CustomerID', 'Gender', 'Age', 'Annual Income (k$)',\n",
      "       'Spending Score (1-100)'],\n",
      "      dtype='object')\n"
     ]
    }
   ],
   "source": [
    "# importing data\n",
    "print(df.shape)\n",
    "\n",
    "# head of the data\n",
    "print('Head of the dataframe : ')\n",
    "print(df.head())\n",
    "\n",
    "print(df.columns)\n",
    "\n",
    "X= df['Annual Income (k$)']\n",
    "y=df['Spending Score (1-100)']"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 23,
   "id": "6b7d1e68",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "X_train : \n",
      "73     50\n",
      "30     30\n",
      "23     25\n",
      "155    78\n",
      "157    78\n",
      "Name: Annual Income (k$), dtype: int64\n",
      "(150,)\n",
      "\n",
      "X_test : \n",
      "104    62\n",
      "128    71\n",
      "49     40\n",
      "34     33\n",
      "64     48\n",
      "Name: Annual Income (k$), dtype: int64\n",
      "(50,)\n",
      "\n",
      "y_train : \n",
      "73     56\n",
      "30      4\n",
      "23     73\n",
      "155    89\n",
      "157    78\n",
      "Name: Spending Score (1-100), dtype: int64\n",
      "(150,)\n",
      "\n",
      "y_test : \n",
      "104    56\n",
      "128    11\n",
      "49     42\n",
      "34     14\n",
      "64     51\n",
      "Name: Spending Score (1-100), dtype: int64\n",
      "(50,)\n"
     ]
    }
   ],
   "source": [
    "# using the train test split function\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "X,y , random_state=104,test_size=0.25, shuffle=True)\n",
    "\n",
    "# printing out train and test sets\n",
    "\n",
    "print('X_train : ')\n",
    "print(X_train.head())\n",
    "print(X_train.shape)\n",
    "\n",
    "print('')\n",
    "print('X_test : ')\n",
    "print(X_test.head())\n",
    "print(X_test.shape)\n",
    "\n",
    "print('')\n",
    "print('y_train : ')\n",
    "print(y_train.head())\n",
    "print(y_train.shape)\n",
    "\n",
    "print('')\n",
    "print('y_test : ')\n",
    "print(y_test.head())\n",
    "print(y_test.shape)"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6f5719ae",
   "metadata": {},
   "source": [
    "### Scaling the data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 24,
   "id": "82ec23b1",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "      <th>Spending Score (1-100)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>0</th>\n",
       "      <td>1</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>6.938776</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>1</th>\n",
       "      <td>2</td>\n",
       "      <td>1</td>\n",
       "      <td>21</td>\n",
       "      <td>5.000000</td>\n",
       "      <td>9.081633</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>2</th>\n",
       "      <td>3</td>\n",
       "      <td>0</td>\n",
       "      <td>20</td>\n",
       "      <td>5.040984</td>\n",
       "      <td>5.255102</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>3</th>\n",
       "      <td>4</td>\n",
       "      <td>0</td>\n",
       "      <td>23</td>\n",
       "      <td>5.040984</td>\n",
       "      <td>8.877551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>4</th>\n",
       "      <td>5</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>5.081967</td>\n",
       "      <td>6.989796</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>195</th>\n",
       "      <td>196</td>\n",
       "      <td>0</td>\n",
       "      <td>35</td>\n",
       "      <td>9.303279</td>\n",
       "      <td>8.979592</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>196</th>\n",
       "      <td>197</td>\n",
       "      <td>0</td>\n",
       "      <td>45</td>\n",
       "      <td>9.549180</td>\n",
       "      <td>6.377551</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>197</th>\n",
       "      <td>198</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>9.549180</td>\n",
       "      <td>8.724490</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>198</th>\n",
       "      <td>199</td>\n",
       "      <td>1</td>\n",
       "      <td>32</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>5.867347</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>199</th>\n",
       "      <td>200</td>\n",
       "      <td>1</td>\n",
       "      <td>30</td>\n",
       "      <td>10.000000</td>\n",
       "      <td>9.183673</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>200 rows × 5 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CustomerID  Gender  Age  Annual Income (k$)  Spending Score (1-100)\n",
       "0             1       1   19            5.000000                6.938776\n",
       "1             2       1   21            5.000000                9.081633\n",
       "2             3       0   20            5.040984                5.255102\n",
       "3             4       0   23            5.040984                8.877551\n",
       "4             5       0   31            5.081967                6.989796\n",
       "..          ...     ...  ...                 ...                     ...\n",
       "195         196       0   35            9.303279                8.979592\n",
       "196         197       0   45            9.549180                6.377551\n",
       "197         198       1   32            9.549180                8.724490\n",
       "198         199       1   32           10.000000                5.867347\n",
       "199         200       1   30           10.000000                9.183673\n",
       "\n",
       "[200 rows x 5 columns]"
      ]
     },
     "execution_count": 24,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "#scaling\n",
    "df_scaled = df.copy()\n",
    "col_names = ['Annual Income (k$)', 'Spending Score (1-100)']\n",
    "features = df_scaled[col_names]\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler()\n",
    "df_scaled[col_names] = scaler.fit_transform(features.values)\n",
    "from sklearn.preprocessing import MinMaxScaler\n",
    "scaler = MinMaxScaler(feature_range=(5, 10))\n",
    "\n",
    "df_scaled[col_names] = scaler.fit_transform(features.values)\n",
    "df_scaled"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "23d11e79",
   "metadata": {},
   "source": [
    "### Implementation of k-means clustering"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 41,
   "id": "2c955e08",
   "metadata": {},
   "outputs": [],
   "source": [
    "from numpy import unique\n",
    "from numpy import where\n",
    "from sklearn.datasets import make_classification\n",
    "from sklearn.cluster import KMeans\n",
    "from matplotlib import pyplot"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 26,
   "id": "4f29482b",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\datasets\\samples_generator.py:189: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y = np.zeros(n_samples, dtype=np.int)\n"
     ]
    }
   ],
   "source": [
    "# defining dataset\n",
    "X, _ = make_classification(n_samples=1000, n_features=2, n_informative=2, n_redundant=0, n_clusters_per_class=1, random_state=4)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 27,
   "id": "59203841",
   "metadata": {},
   "outputs": [],
   "source": [
    "# defining the model\n",
    "model = KMeans(n_clusters=2)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 28,
   "id": "daaafc1f",
   "metadata": {
    "scrolled": true
   },
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\cluster\\k_means_.py:445: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  max_iter=max_iter, verbose=verbose)\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n"
     ]
    },
    {
     "data": {
      "text/plain": [
       "KMeans(algorithm='auto', copy_x=True, init='k-means++', max_iter=300,\n",
       "       n_clusters=2, n_init=10, n_jobs=None, precompute_distances='auto',\n",
       "       random_state=None, tol=0.0001, verbose=0)"
      ]
     },
     "execution_count": 28,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "# fitting the model\n",
    "model.fit(X)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 29,
   "id": "0768d38e",
   "metadata": {},
   "outputs": [
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n",
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\metrics\\pairwise.py:56: DeprecationWarning: `np.float` is a deprecated alias for the builtin `float`. To silence this warning, use `float` by itself. Doing this will not modify any behavior and is safe. If you specifically wanted the numpy scalar type, use `np.float64` here.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  dtype = np.float\n"
     ]
    },
    {
     "data": {
      "image/png": "iVBORw0KGgoAAAANSUhEUgAAAicAAAGlCAYAAAAhwFaTAAAAOXRFWHRTb2Z0d2FyZQBNYXRwbG90bGliIHZlcnNpb24zLjUuMywgaHR0cHM6Ly9tYXRwbG90bGliLm9yZy/NK7nSAAAACXBIWXMAAA9hAAAPYQGoP6dpAABlUElEQVR4nO3de2AU5d03/O/M7mY32SQkQQICKcccOAgiBxERveWgVlvQ+ohAtR5utVZoPbR3Hx/7tHf73s9jta1PHw+l7duDBwTt2wptbRUBFUWgHBWRJAREzhAkCTnuZjcz7x9xw2azO3vN7Mzu7O73809rMrtzZdhkfnNdv9/vklRVVUFERERkE3KqB0BEREQUjsEJERER2QqDEyIiIrIVBidERERkKwxOiIiIyFYYnBAREZGtMDghIiIiW2FwQkRERLbiTPUAjFJVFYqSWP84WZYSfg/qjdfUGryu5uM1NR+vqTUy6brKsgRJkuIel7bBiaKoaGhoM/x6p1NGcbEXzc3tCAYVE0eWvXhNrcHraj5eU/Pxmloj065rSYkXDkf84ITLOkRERGQrDE6IiIjIVhicEBERka0wOCEiIiJbYXBCREREtsLghIiIiGyFwQkRERHZCoMTIiIispWkByePPvooKisrsX///mSfmoiIiNJAUoOTDz74AK+99loyT0lERERpJmnt6zs6OvDDH/4wWacjIiKiMIqiYv/RJjS1+VHkdaOirAiyHL+VfCokLTj55S9/ibNnz2LatGnYtm1bsk5LRESU9XbW1mPl+jo0tvh7vlZc4MbiOeWYXFmawpFFl5RlnT179uDFF1/Et7/9bQwZMiQZpyQiIiJ0BybPrd7bKzABgMYWP55bvRc7a+tTNLLYLJ85CQQCeOyxxzBmzBh84xvfwGOPPWbaezudxmMrh0Pu9b+UOF5Ta/C6mo/X1Hy8ptZI9LoqiopV6+s0j1m1oQ5Txwy01RKP5cHJb37zGxw8eBB//vOf4XA4THtfWZZQXOxN+H0KC3NNGA2F4zW1Bq+r+XhNzcdrag2j1/XjA5+jIWLGJFJDsx8nGn24aPQFhs5hBUuDkwMHDuDXv/417rjjDowdO9bU91YUFc3N7YZf73DIKCzMRXNzB7q6FBNHlr14Ta3B62o+XlPz8ZpaI9HrevTkOeHjhva3PrAsLMwVmgWyLDhRFAU/+MEPMGjQICxbtsyScwSDif8CdHUpprwPncdrag1eV/PxmpqP19QaRq9rQa5L+Dg7/btZFpy8/PLL2L17N/7whz8gN5fTfERERMlWUVaE4gJ3n2TYcCUF3WXFdmJZcPLWW28BAO66666o3//KV74CANiwYQOGDh1q1TCIiIiylixLWDynHM+t3hvzmEVzym2VDAtYGJzceOONmDZtWp+vr1+/HjU1NVi0aBH69++PwsJCq4ZARESU9SZXluKBG8f36XNSUuDGIpv2ObEsOLnpppuifv348eOoqanB4sWLUVFRYdXpiYiI6AuTK0sxqXwAO8QSERGRfciyhKphxakehhB2yyEiIiJbSXpw8tOf/hS1tbVc0iEiIqKoOHNCREREtsLghIiIiGyFwQkRERHZCoMTIiIishUGJ0RERGQrDE6IiIjIVhicEBERka0wOCEiIiJbYXBCREREtsLghIiIiGyFwQkRERHZCoMTIiIishUGJ0RERGQrDE6IiIjIVhicEBERka0wOCEiIiJbYXBCREREtsLghIiIiGyFwQkRERHZCoMTIiIishUGJ0RERGQrDE6IiIjIVhicEBERka0wOCEiIiJbYXBCREREtsLghIiIiGyFwQkRERHZCoMTIiIishUGJ0RERGQrDE6IiIjIVhicEBERka0wOCEiIiJbYXBCREREtsLghIiIiGyFwQkRERHZCoMTIiIishUGJ0RERGQrDE6IiIjIVhicEBERka0wOCEiIiJbcaZ6AEREROlEUVTsP9qEpjY/irxuVJQVQZalVA8rozA4ISIiErSzth4r19ehscXf87XiAjcWzynH5MrSFI4ss3BZh4iISMDO2no8t3pvr8AEABpb/Hhu9V7srK1P0cgyD4MTIiKiOBRFxcr1dZrHrFpfB0VRkzSizMbghIiIKI79R5v6zJhEamjxY//RppjfVxQVNYcbsXXfKdQcbmQgo4E5J0RERHE0tWkHJvGOY66KPpw5ISIiiqPI6zZ8HHNV9GNwQkREFEdFWRGKC7QDlJKC7rLicMxVMYbBCRERURyyLGHxnHLNYxbNKe/T78SMXJVsxOCEiIhIwOTKUjxw4/g+MyglBW48cOP4qLkjieaqZCsmxBIREQmaXFmKSeUDhDvEJpKrks0YnBAREekgyxKqhhULHRvKVdFa2omWq5LtuKxDRERkEaO5KtmOwQkREZGF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X6zOmjVLbWxs7Pl6dXW1Om7cOPWWW25J3eDS1Llz59SLL75Yvfzyy9X6+vqer7e2tqrz589XKyoq1H379qVwhOnt9ddfVydOnKhWVFSoFRUVamtra6qHlDZ27typVlRUqA899FDP1xRFUf/jP/5DraioUN99990Uji69HTt2TL3xxht7PpcvvfRSqoeU1h555BG1oqJCXb16da+v/+pXv1IrKirU//W//ldqBpZEWT1zsn//fgwYMACLFi1CUVFRz9erqqpQXl6Ojz/+GF1dXakbYBratGkT2tvbsXjxYgwYMKDn616vF3feeScA4P3330/V8NJWQ0MDHnjgATz88MMoKSnBsGHDUj2ktPPyyy8DAB544IGer0mShIcffhiSJOEvf/lLqoaW1p5//nl85StfQU1NDaZPn57q4aQ9RVGwYcMGDBs2DAsWLOj1vXvuuQdutxvvvfdeagaXRFkdnEyYMAFvvfUWvvnNb/b6ut/vx4kTJ1BUVASHw5Gi0aWnkSNH4qGHHsJVV13V53tutxsA0N7enuRRpb+6ujps2LABN910E9asWYOBAwemekhpZ8eOHRgwYABGjRrV6+sDBw7E8OHDsW3bthSNLL29+OKLGDJkCFasWIH58+enejhpLxgM4jvf+Q7uvffePt9zOBxwOBzo6OhIwciSy5nqAdhJZ2cnamtr8X/+z/9BU1MTHn300VQPKe1UVVWhqqoq6vfWr18PACgvL0/mkDLCl770Jfz1r39FZWVlqoeSljo7O3Hq1ClccsklUb8/ZMgQHDp0COfOnUO/fv2SPLr09uMf/xgzZsyAw+HAZ599lurhpL2cnBzccccdUb+3ZcsWtLe3x/wcZxIGJ19QFAWTJk1CMBgEANx2220xPyCk344dO/CPf/wDF1xwAa6++upUDyftXHjhhbjwwgtTPYy01dTUBAAoLCyM+v2CggIAQEtLC4MTna644opUDyEr+Hw+PP744wCAhQsXpng01svI4GTWrFk4ffq05jFLly7FsmXLev67ra0Nt956KyRJwnvvvYeXXnoJfr8fP/nJTyBJktVDtj0j1zSkrq4ODzzwABRFwY9//GPk5uZaNcy0ksg1JX1CDx05OTlRvx/6ut/vT9qYiEQFAgE8+OCD2L9/P+bMmYN58+alekiWy8jgZN68eT1PSrFETo8XFBTgf/7P/wmgO0K977778Kc//QkzZszAddddZ9VQ04aRawoAn3zyCf793/8dTU1NeOihhzBnzhyLRph+jF5T0s/j8QBAzH4mnZ2dAIC8vLykjYlIhM/nw4MPPoh33nkH48aNwxNPPJHqISVFRgYnP/jBDxJ6vcfjwcMPP4xbbrkFGzZsYHACY9d08+bNWLp0Kdra2vDtb3+7T+Jxtkv0c0ri8vPzIcsyWlpaon4/9PXQ8g6RHZw7dw733Xcfdu/ejfHjx+P3v/898vPzUz2spMjqap1jx47hzTffRH19fZ/vDR48GADQ2NiY7GFlhLVr1+Lee+9Fe3s7HnvssV7lm0TJlpOTg8GDB+PYsWNRv3/s2DEMGDAga/7wk/2dOXMGS5Yswe7duzFt2jS88MILvVpeZLqsDk7WrVuH73znO/j73//e53s1NTUAgLKysmQPK+1t3rwZjzzyCBRFwRNPPIHbb7891UMiwuTJk3Hq1CkcPXq019dPnz6Nzz77DBdffHFqBkYUobW1FXfffTfq6uowe/bsrJoxCcnq4GTevHlwuVz44x//2Gu/gsbGRjz55JMAgJtuuilVw0tLTU1N+O53v4tAIIDHH3+cfQ/INkINrZ566imoqgoAUFUVTz31FADglltuSdXQiHp5/PHHUVtbiyuuuAJPP/10zETuTJaROSeihgwZgkceeQQ//elPccMNN+Daa69FV1cX3n77bZw5cwYPPvggJkyYkOphppUVK1bg7NmzKC0txZEjR/DMM8/0OWbSpEmYOXNmCkZH2WzGjBn48pe/jH/+8584ceIEpk2bhp07d2Lnzp24/vrrMWvWrFQPkQhHjx7Fa6+9BqB75n758uV9jvF4PLjnnnuSPbSkyurgBADuvPNODB06FL///e/x2muvQZZljB07Fj/+8Y8xe/bsVA8v7ezYsQMAUF9fj2effTbqMXfddReDE0qJJ554AqNGjcLq1avx/PPPY/DgwXjwwQdx9913p3poRACAXbt2QVEUAMDKlSujHlNUVJTxwYmkhuY3iYiIiGwgq3NOiIiIyH4YnBAREZGtMDghIiIiW2FwQkRERLbC4ISIiIhshcEJERER2QqDEyIiIrIVBidERERkKwxOiIiIyFYYnBAREZGtMDghIiIiW2FwQkRERLby/wNXRL+sgDAwLQAAAABJRU5ErkJggg==\n",
      "text/plain": [
       "<Figure size 640x480 with 1 Axes>"
      ]
     },
     "metadata": {},
     "output_type": "display_data"
    }
   ],
   "source": [
    "# assign a cluster to each example\n",
    "yhat = model.predict(X)\n",
    "# retrieve unique clusters\n",
    "clusters = unique(yhat)\n",
    "# create scatter plot for samples from each cluster\n",
    "for cluster in clusters:\n",
    "    # get row indexes for samples with this cluster\n",
    "    row_ix = where(yhat == cluster)\n",
    "    # create scatter of these samples\n",
    "    pyplot.scatter(X[row_ix, 0], X[row_ix, 1])\n",
    "# show the plot\n",
    "pyplot.show()"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 30,
   "id": "afc05d79",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     CustomerID  Gender  Age  Annual Income (k$)\n",
      "61           62       1   19                  46\n",
      "125         126       0   31                  70\n",
      "180         181       0   37                  97\n",
      "154         155       0   47                  78\n",
      "80           81       1   57                  54\n",
      "..          ...     ...  ...                 ...\n",
      "67           68       0   68                  48\n",
      "192         193       1   33                 113\n",
      "117         118       0   49                  65\n",
      "47           48       0   27                  40\n",
      "172         173       1   36                  87\n",
      "\n",
      "[190 rows x 4 columns]      CustomerID  Gender  Age  Annual Income (k$)\n",
      "18           19       1   52                  23\n",
      "170         171       1   40                  87\n",
      "107         108       1   54                  63\n",
      "98           99       1   48                  61\n",
      "177         178       1   27                  88\n",
      "182         183       1   46                  98\n",
      "5             6       0   22                  17\n",
      "146         147       1   48                  77\n",
      "12           13       0   58                  20\n",
      "152         153       0   44                  78 61     55\n",
      "125    77\n",
      "180    32\n",
      "154    16\n",
      "80     51\n",
      "       ..\n",
      "67     48\n",
      "192     8\n",
      "117    59\n",
      "47     47\n",
      "172    10\n",
      "Name: Spending Score (1-100), Length: 190, dtype: int64 18     29\n",
      "170    13\n",
      "107    46\n",
      "98     42\n",
      "177    69\n",
      "182    15\n",
      "5      76\n",
      "146    36\n",
      "12     15\n",
      "152    20\n",
      "Name: Spending Score (1-100), dtype: int64\n"
     ]
    }
   ],
   "source": [
    "#testing and training\n",
    "X = df.iloc[:, :-1]\n",
    "y = df.iloc[:, -1]\n",
    " \n",
    "# split the dataset\n",
    "X_train, X_test, y_train, y_test = train_test_split(\n",
    "    X, y, test_size=0.05, random_state=0)\n",
    "print(X_train, X_test, y_train, y_test)"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 31,
   "id": "182af43e",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "     CustomerID  Gender  Age  Annual Income (k$)\n",
      "18           19       1   52                  23\n",
      "170         171       1   40                  87\n",
      "107         108       1   54                  63\n",
      "98           99       1   48                  61\n",
      "177         178       1   27                  88\n",
      "182         183       1   46                  98\n",
      "5             6       0   22                  17\n",
      "146         147       1   48                  77\n",
      "12           13       0   58                  20\n",
      "152         153       0   44                  78\n",
      "[14 75 46 55 10 75  6 56 14 43]\n"
     ]
    }
   ],
   "source": [
    "from sklearn.linear_model import LogisticRegression\n",
    "logreg= LogisticRegression()\n",
    "logreg.fit(X_train,y_train)\n",
    "y_pred=logreg.predict(X_test)\n",
    "print (X_test) #test dataset\n",
    "print (y_pred) #predicted values"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 32,
   "id": "6a1841b0",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>61</th>\n",
       "      <td>62</td>\n",
       "      <td>1</td>\n",
       "      <td>19</td>\n",
       "      <td>46</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>125</th>\n",
       "      <td>126</td>\n",
       "      <td>0</td>\n",
       "      <td>31</td>\n",
       "      <td>70</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>180</th>\n",
       "      <td>181</td>\n",
       "      <td>0</td>\n",
       "      <td>37</td>\n",
       "      <td>97</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>154</th>\n",
       "      <td>155</td>\n",
       "      <td>0</td>\n",
       "      <td>47</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>80</th>\n",
       "      <td>81</td>\n",
       "      <td>1</td>\n",
       "      <td>57</td>\n",
       "      <td>54</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>...</th>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "      <td>...</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>67</th>\n",
       "      <td>68</td>\n",
       "      <td>0</td>\n",
       "      <td>68</td>\n",
       "      <td>48</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>192</th>\n",
       "      <td>193</td>\n",
       "      <td>1</td>\n",
       "      <td>33</td>\n",
       "      <td>113</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>117</th>\n",
       "      <td>118</td>\n",
       "      <td>0</td>\n",
       "      <td>49</td>\n",
       "      <td>65</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>47</th>\n",
       "      <td>48</td>\n",
       "      <td>0</td>\n",
       "      <td>27</td>\n",
       "      <td>40</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>172</th>\n",
       "      <td>173</td>\n",
       "      <td>1</td>\n",
       "      <td>36</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "<p>190 rows × 4 columns</p>\n",
       "</div>"
      ],
      "text/plain": [
       "     CustomerID  Gender  Age  Annual Income (k$)\n",
       "61           62       1   19                  46\n",
       "125         126       0   31                  70\n",
       "180         181       0   37                  97\n",
       "154         155       0   47                  78\n",
       "80           81       1   57                  54\n",
       "..          ...     ...  ...                 ...\n",
       "67           68       0   68                  48\n",
       "192         193       1   33                 113\n",
       "117         118       0   49                  65\n",
       "47           48       0   27                  40\n",
       "172         173       1   36                  87\n",
       "\n",
       "[190 rows x 4 columns]"
      ]
     },
     "execution_count": 32,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 33,
   "id": "927ff395",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>23</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>171</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>87</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>108</td>\n",
       "      <td>1</td>\n",
       "      <td>54</td>\n",
       "      <td>63</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>61</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>178</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>88</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>183</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>98</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>147</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>20</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>153</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>78</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     CustomerID  Gender  Age  Annual Income (k$)\n",
       "18           19       1   52                  23\n",
       "170         171       1   40                  87\n",
       "107         108       1   54                  63\n",
       "98           99       1   48                  61\n",
       "177         178       1   27                  88\n",
       "182         183       1   46                  98\n",
       "5             6       0   22                  17\n",
       "146         147       1   48                  77\n",
       "12           13       0   58                  20\n",
       "152         153       0   44                  78"
      ]
     },
     "execution_count": 33,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "X_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 34,
   "id": "6f4c113b",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "61     55\n",
       "125    77\n",
       "180    32\n",
       "154    16\n",
       "80     51\n",
       "       ..\n",
       "67     48\n",
       "192     8\n",
       "117    59\n",
       "47     47\n",
       "172    10\n",
       "Name: Spending Score (1-100), Length: 190, dtype: int64"
      ]
     },
     "execution_count": 34,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_train"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 35,
   "id": "64fc49dc",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "18     29\n",
       "170    13\n",
       "107    46\n",
       "98     42\n",
       "177    69\n",
       "182    15\n",
       "5      76\n",
       "146    36\n",
       "12     15\n",
       "152    20\n",
       "Name: Spending Score (1-100), dtype: int64"
      ]
     },
     "execution_count": 35,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "y_test"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 36,
   "id": "34bef64d",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "1.0\n"
     ]
    },
    {
     "name": "stderr",
     "output_type": "stream",
     "text": [
      "C:\\Users\\samyu\\AppData\\Roaming\\Python\\Python37\\site-packages\\sklearn\\tree\\tree.py:163: DeprecationWarning: `np.int` is a deprecated alias for the builtin `int`. To silence this warning, use `int` by itself. Doing this will not modify any behavior and is safe. When replacing `np.int`, you may wish to use e.g. `np.int64` or `np.int32` to specify the precision. If you wish to review your current use, check the release note link for additional information.\n",
      "Deprecated in NumPy 1.20; for more details and guidance: https://numpy.org/devdocs/release/1.20.0-notes.html#deprecations\n",
      "  y_encoded = np.zeros(y.shape, dtype=np.int)\n"
     ]
    }
   ],
   "source": [
    "# Select algorithm\n",
    "from sklearn.tree import DecisionTreeClassifier\n",
    "from sklearn.metrics import accuracy_score\n",
    "model = DecisionTreeClassifier()\n",
    "# Fit model to the data\n",
    "model.fit(X_train, y_train)\n",
    "# Check model performance on training data\n",
    "predictions = model.predict(X_train)\n",
    "print(accuracy_score(y_train, predictions))"
   ]
  },
  {
   "cell_type": "markdown",
   "id": "6fb43950",
   "metadata": {},
   "source": [
    "#### Evaluating the model on the test data "
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 37,
   "id": "233acc37",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/plain": [
       "array([14, 95, 56, 49, 75, 16, 77, 16, 14, 16], dtype=int64)"
      ]
     },
     "execution_count": 37,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "predictions = model.predict(X_test)\n",
    "predictions"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 38,
   "id": "031b5415",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "0.0\n"
     ]
    }
   ],
   "source": [
    "print(accuracy_score(y_test, predictions))"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 39,
   "id": "97b6bd29",
   "metadata": {},
   "outputs": [
    {
     "data": {
      "text/html": [
       "<div>\n",
       "<style scoped>\n",
       "    .dataframe tbody tr th:only-of-type {\n",
       "        vertical-align: middle;\n",
       "    }\n",
       "\n",
       "    .dataframe tbody tr th {\n",
       "        vertical-align: top;\n",
       "    }\n",
       "\n",
       "    .dataframe thead th {\n",
       "        text-align: right;\n",
       "    }\n",
       "</style>\n",
       "<table border=\"1\" class=\"dataframe\">\n",
       "  <thead>\n",
       "    <tr style=\"text-align: right;\">\n",
       "      <th></th>\n",
       "      <th>CustomerID</th>\n",
       "      <th>Gender</th>\n",
       "      <th>Age</th>\n",
       "      <th>Annual Income (k$)</th>\n",
       "      <th>Actual</th>\n",
       "      <th>Prediction</th>\n",
       "    </tr>\n",
       "  </thead>\n",
       "  <tbody>\n",
       "    <tr>\n",
       "      <th>18</th>\n",
       "      <td>19</td>\n",
       "      <td>1</td>\n",
       "      <td>52</td>\n",
       "      <td>23</td>\n",
       "      <td>29</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>170</th>\n",
       "      <td>171</td>\n",
       "      <td>1</td>\n",
       "      <td>40</td>\n",
       "      <td>87</td>\n",
       "      <td>13</td>\n",
       "      <td>95</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>107</th>\n",
       "      <td>108</td>\n",
       "      <td>1</td>\n",
       "      <td>54</td>\n",
       "      <td>63</td>\n",
       "      <td>46</td>\n",
       "      <td>56</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>98</th>\n",
       "      <td>99</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>61</td>\n",
       "      <td>42</td>\n",
       "      <td>49</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>177</th>\n",
       "      <td>178</td>\n",
       "      <td>1</td>\n",
       "      <td>27</td>\n",
       "      <td>88</td>\n",
       "      <td>69</td>\n",
       "      <td>75</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>182</th>\n",
       "      <td>183</td>\n",
       "      <td>1</td>\n",
       "      <td>46</td>\n",
       "      <td>98</td>\n",
       "      <td>15</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>5</th>\n",
       "      <td>6</td>\n",
       "      <td>0</td>\n",
       "      <td>22</td>\n",
       "      <td>17</td>\n",
       "      <td>76</td>\n",
       "      <td>77</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>146</th>\n",
       "      <td>147</td>\n",
       "      <td>1</td>\n",
       "      <td>48</td>\n",
       "      <td>77</td>\n",
       "      <td>36</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>12</th>\n",
       "      <td>13</td>\n",
       "      <td>0</td>\n",
       "      <td>58</td>\n",
       "      <td>20</td>\n",
       "      <td>15</td>\n",
       "      <td>14</td>\n",
       "    </tr>\n",
       "    <tr>\n",
       "      <th>152</th>\n",
       "      <td>153</td>\n",
       "      <td>0</td>\n",
       "      <td>44</td>\n",
       "      <td>78</td>\n",
       "      <td>20</td>\n",
       "      <td>16</td>\n",
       "    </tr>\n",
       "  </tbody>\n",
       "</table>\n",
       "</div>"
      ],
      "text/plain": [
       "     CustomerID  Gender  Age  Annual Income (k$)  Actual  Prediction\n",
       "18           19       1   52                  23      29          14\n",
       "170         171       1   40                  87      13          95\n",
       "107         108       1   54                  63      46          56\n",
       "98           99       1   48                  61      42          49\n",
       "177         178       1   27                  88      69          75\n",
       "182         183       1   46                  98      15          16\n",
       "5             6       0   22                  17      76          77\n",
       "146         147       1   48                  77      36          16\n",
       "12           13       0   58                  20      15          14\n",
       "152         153       0   44                  78      20          16"
      ]
     },
     "execution_count": 39,
     "metadata": {},
     "output_type": "execute_result"
    }
   ],
   "source": [
    "df = X_test.copy()\n",
    "df['Actual'] = y_test\n",
    "df['Prediction'] = predictions\n",
    "df"
   ]
  },
  {
   "cell_type": "code",
   "execution_count": 40,
   "id": "8593d74b",
   "metadata": {},
   "outputs": [
    {
     "name": "stdout",
     "output_type": "stream",
     "text": [
      "Confusion Matrix :\n",
      "[[3 4]\n",
      " [1 2]]\n",
      "Accuracy Score is 0.5\n",
      "Classification Report : \n",
      "              precision    recall  f1-score   support\n",
      "\n",
      "           0       0.75      0.43      0.55         7\n",
      "           1       0.33      0.67      0.44         3\n",
      "\n",
      "    accuracy                           0.50        10\n",
      "   macro avg       0.54      0.55      0.49        10\n",
      "weighted avg       0.62      0.50      0.52        10\n",
      "\n",
      "AUC-ROC: 0.5476190476190477\n",
      "LOGLOSS Value is 17.26970803642742\n"
     ]
    }
   ],
   "source": [
    "from sklearn.metrics import confusion_matrix\n",
    "from sklearn.metrics import accuracy_score\n",
    "from sklearn.metrics import classification_report\n",
    "from sklearn.metrics import roc_auc_score\n",
    "from sklearn.metrics import log_loss\n",
    "X_actual = [0, 1, 0, 1, 0, 0, 1, 0, 0, 0]\n",
    "Y_predic = [1, 0, 1, 1, 1, 0, 1, 1, 0, 0]\n",
    "results = confusion_matrix(X_actual, Y_predic)\n",
    "print ('Confusion Matrix :')\n",
    "print(results)\n",
    "print ('Accuracy Score is',accuracy_score(X_actual, Y_predic))\n",
    "print ('Classification Report : ')\n",
    "print (classification_report(X_actual, Y_predic))\n",
    "print('AUC-ROC:',roc_auc_score(X_actual, Y_predic))\n",
    "print('LOGLOSS Value is',log_loss(X_actual, Y_predic))"
   ]
  }
 ],
 "metadata": {
  "kernelspec": {
   "display_name": "Python 3 (ipykernel)",
   "language": "python",
   "name": "python3"
  },
  "language_info": {
   "codemirror_mode": {
    "name": "ipython",
    "version": 3
   },
   "file_extension": ".py",
   "mimetype": "text/x-python",
   "name": "python",
   "nbconvert_exporter": "python",
   "pygments_lexer": "ipython3",
   "version": "3.7.6"
  }
 },
 "nbformat": 4,
 "nbformat_minor": 5
}
